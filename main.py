from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentTypes
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import random

from db import Database
import config as cfg
import kb

db = Database("database.db")

client = Bot(token=cfg.TOKEN)
dp = Dispatcher(client, storage=MemoryStorage())

class ProfileStatesGroup(StatesGroup):
    answer = State()
    answer_to_answer = State()
    sending_load_photo = State()
    sending_load_text = State()
    test_send_post = State()
    
@dp.message_handler(content_types=["photo"], state=ProfileStatesGroup.sending_load_photo)
async def sending_load_photo_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['sending_photo'] = message.photo[0].file_id

    await message.answer('–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=kb.publ_markup)
    await ProfileStatesGroup.next()

@dp.message_handler(content_types=["text"], state=ProfileStatesGroup.sending_load_text)
async def sending_load_photo_and_text_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['sending_text'] = message.text

    await message.answer('‚ÑπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...')

    ids = db.get_all_id()
    for i in ids:
        await client.send_photo(i[0], data['sending_photo'], f'{data["sending_text"]}')
            
    await message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.')
    await state.finish()

@dp.message_handler(content_types=['text'], state=ProfileStatesGroup.answer)
async def answer_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        global answer
        answer = message.text
        data['answer'] = message.text
        global one_id
        one_id = message.from_user.id
    
    await message.answer(f'‚úÖ *–ì–æ—Ç–æ–≤–æ, —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!*\n\n–ê –µ—Å–ª–∏ —Ç—ã —Ç–æ–∂–µ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è –æ—Ç —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, —Ä–∞–∑–º–µ—Å—Ç–∏ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ —Å–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n\nüîó *–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:* https://t.me/{cfg.BOT_NAME}?start={message.from_user.id}', parse_mode='markdown', reply_markup=kb.chavo_markup)
    await client.send_message(referrer_id, f'‚ú® *–£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ:* (#{random.randint(1000000, 9999999)})\n\n{data["answer"]}', parse_mode='markdown', reply_markup=kb.answer_markup)
    await state.finish()

@dp.message_handler(content_types=['text'], state=ProfileStatesGroup.answer_to_answer)
async def answer_to_answer_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['answer_to_answer'] = message.text
    
    await client.send_message(one_id, f'‚ú® *–¢—ã –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:* (#{random.randint(1000000, 9999999)})\n\n{data["answer_to_answer"]}', parse_mode='markdown')
    await message.answer('‚úåÔ∏è *–ì–æ—Ç–æ–≤–æ!* –¢–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω', parse_mode='markdown')
    await state.finish()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    db.create_table()
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)
        
    start_command = message.text
    global referrer_id
    referrer_id = str(start_command[7:])
    if referrer_id != '':
        if str(referrer_id) == str(message.from_user.id):
            await message.answer('‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ!')
            return
        else:
            await message.answer('‚ú® –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö –∫ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É.\n\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ –æ –Ω–µ–º –¥—É–º–∞–µ—à—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–≥–Ω–æ–≤–µ–Ω–∏–π –æ–Ω –µ–≥–æ –ø–æ–ª—É—á–∏—Ç, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ –æ–Ω–æ.\n\nüìå *–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É - —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —á—Ç–æ –Ω–∏–±—É–¥—å!*', parse_mode='markdown')
            await ProfileStatesGroup.answer.set()
            return

    await message.answer(f'üòâ *–ü—Ä–∏–≤–µ—Ç!* –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è –æ—Ç —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–º–µ—Å—Ç–∏ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º —Å—Ç–æ—Ä–∏—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –≤ —á–∞—Ç —Å –¥—Ä—É–∑—å—è–º–∏.\n\nüîó *–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:* https://t.me/{cfg.BOT_NAME}?start={message.from_user.id}', parse_mode='markdown')

@dp.message_handler(commands=['apanel'])
async def apanel(message: types.Message):
    if message.from_user.id in cfg.ADMIN_ID:
        await message.answer(f'ü§ñ *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–ó–∞—Ä–µ–≥–∞–Ω–æ –ª—é–¥–µ–π: *{all_users_count()}*', parse_mode='markdown', reply_markup=kb.admin_markup)
    else:
        await message.answer('‚ùå *–¢—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!*', parse_mode='markdown')
    
@dp.callback_query_handler(state = '*')
async def callback_query(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'answer':
        await client.edit_message_text(f'‚ú® *–£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ:* (#{random.randint(1000000, 9999999)})\n\n{answer}', call.message.chat.id, call.message.message_id, parse_mode='markdown')
        await call.message.answer('‚ö°Ô∏è *–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...*', parse_mode='markdown')
        await ProfileStatesGroup.answer_to_answer.set()
    elif call.data == 'sending':
        await call.message.answer('–ó–∞–≥—Ä—É–∑–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É:', reply_markup=kb.publ_markup)
        await ProfileStatesGroup.sending_load_photo.set()
    elif call.data == 'publ':
        await state.finish()
        await client.edit_message_text('‚ÑπÔ∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', call.message.chat.id, call.message.message_id)

@dp.message_handler()
async def get_message(message: types.Message):
    await start(message)

def all_users_count():
    count = 0
    all_users = db.get_all_id()
    for _ in all_users:
        count += 1
    return count

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)